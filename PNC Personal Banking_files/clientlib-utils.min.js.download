// Array.from support for IE11
// MDN Polyfill
Array.from||(Array.from=function(){var r;try{r=Symbol.iterator?Symbol.iterator:"Symbol(Symbol.iterator)"}catch(t){r="Symbol(Symbol.iterator)"}var t=Object.prototype.toString,n=function(r){return"function"==typeof r||"[object Function]"===t.call(r)},o=Math.pow(2,53)-1,e=function(r){var t=function(r){var t=Number(r);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t}(r);return Math.min(Math.max(t,0),o)};return function(t){var o=Object(t),a=n(o[r]);if(null==t&&!a)throw new TypeError("Array.from requires an array-like object or iterator - not null or undefined");var i,u=arguments.length>1?arguments[1]:void 0;if(void 0!==u){if(!n(u))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(i=arguments[2])}var f=e(o.length);return function(r,t,n,o,e,a){for(var i=0;i<n||e;){var u=o(i),f=e?u.value:u;if(e&&u.done)return t;t[i]=a?void 0===r?a(f,i):a.call(r,f,i):f,i+=1}if(e)throw new TypeError("Array.from: provided arrayLike or iterator has length more then 2 ** 52 - 1");return t.length=n,t}(i,n(this)?Object(new this(f)):new Array(f),f,function(t,n){var o=t&&n[r]();return function(r){return t?o.next():n[r]}}(a,o),a,u)}}());
// UUID-Random-v1.3.2
// https://github.com/jchook/uuid-random
"use strict";!function(){var n,r,t,e=0,o=[];for(r=0;r<256;r++)o[r]=(r+256).toString(16).substr(1);function u(){var r,t=(r=16,(!n||e+r>i.BUFFER_SIZE)&&(e=0,n=i.randomBytes(i.BUFFER_SIZE)),n.slice(e,e+=r));return t[6]=15&t[6]|64,t[8]=63&t[8]|128,t}function i(){var n=u();return o[n[0]]+o[n[1]]+o[n[2]]+o[n[3]]+"-"+o[n[4]]+o[n[5]]+"-"+o[n[6]]+o[n[7]]+"-"+o[n[8]]+o[n[9]]+"-"+o[n[10]]+o[n[11]]+o[n[12]]+o[n[13]]+o[n[14]]+o[n[15]]}i.BUFFER_SIZE=4096,i.bin=u,i.clearBuffer=function(){n=null,e=0},i.test=function(n){return"string"==typeof n&&/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(n)},"undefined"!=typeof crypto?t=crypto:"undefined"!=typeof window&&void 0!==window.msCrypto&&(t=window.msCrypto),"undefined"!=typeof module&&"function"==typeof require?(t=t||require("crypto"),module.exports=i):"undefined"!=typeof window&&(window.uuid=i),i.randomBytes=function(){if(t){if(t.randomBytes)return t.randomBytes;if(t.getRandomValues)return"function"!=typeof Uint8Array.prototype.slice?function(n){var r=new Uint8Array(n);return t.getRandomValues(r),Array.from(r)}:function(n){var r=new Uint8Array(n);return t.getRandomValues(r),r}}return function(n){var r,t=[];for(r=0;r<n;r++)t.push(Math.floor(256*Math.random()));return t}}()}();
/**
 *  Checks if Number is less than another Number
 *  @param {Number} val1 - Value to check
 *  @param {Number} val2 - Upper bound Value
 *  @returns {Boolean} 
 */
 function isLower(val1,val2) {
	"use strict";
	return (val1 < val2 );
}
/**
 *  Converts a string into a Key:Val Object
 *  @param {String} input - Example input: "key=val|key=val|key=val|..."
 *  @param {String} delimiter - (Optional) Default delimiter is "|"
 *  @returns {Object} objList
 */
function createKeyValObj(input,delimiter) {
	"use strict";
	var d = delimiter || "|";
	var objList = {};
	var items = input.split(d);
	var l = items.length;
	var i,item,itemId,itemVal;
	for ( i = 0; i < l; i+=1 ) {
		item = items[i].split("=");
		itemId = item[0].toLowerCase();
		itemVal = item[1].toLowerCase();
		objList[itemId] = itemVal;
	}
	return objList;
}
/**
 *  Search an Array of Objects for a term and return the matching index position
 *  @param {Array} inputArray - Array of Objects
 *  @param {String} propertyName - Property name within the object to compare to the search term
 *  @param {String} searchTerm - Search term to find
 *  @returns {Number} inx - index of the array or -1 if not in array 
 */
function findArrayIndex(inputArray,searchTerm,propertyName) {
	"use strict";
	var l = inputArray.length;
	var prop = propertyName || ""; 
	var inx;

	if (prop) {
		//Property exists
		for ( inx = 0; inx < l; inx+=1 ) {
			if ( inputArray[inx][prop] === searchTerm) {
				return inx;
			}
		}
	} else {
		//No property
		for ( inx = 0; inx < l; inx+=1 ) {
			if ( inputArray[inx] === searchTerm) {
				return inx;
			}
		}
	}
	//Not Found
	inx = -1;
	return inx;
}
/**
 * Retrieve a cookie
 * @param {String} name - Name of the cookie to find
 * @returns {String} - Value of the cookie
 */
function getCookie(name) {
	"use strict";
  var value = "; " + document.cookie;
  var parts = value.split("; " + name + "=");
  if (parts.length === 2) {
      return parts.pop().split(";").shift();
  }
}

if(typeof module === 'object' && typeof module.exports === 'object'){
	module.exports.isLower = isLower;
	module.exports.createKeyValObj = createKeyValObj;
	module.exports.findArrayIndex = findArrayIndex;
	module.exports.getCookie = getCookie;
}
/**
 *  Search Object and determine the Adobe Target campaign name
 *  @param {Object} olbObj - Object list of customer products
 *  @param {Array} dtmArray - Array of Objects with the campaign pools
 *  @param {Number} inx - (Optional) Starting Index position
 *  @returns {String} targetPoolId
 */
 function findTargetPool(productList,poolArray,inx) {
	"use strict";
	var l = poolArray.length;
	var i = inx || 0;
	var targetPoolId,products,j,k,product;

	while( i < l ) {
		//Get one Pool
		products = poolArray[i].products;
		k = products.length;
		if ( k > 0 ) {
			//Check Products in Pool. Does user have them already?
			for ( j = 0; j < k; j+=1 ) {
				product = products[j];
				if (productList[product] === "n") {
					targetPoolId = poolArray[i].id;
          			return targetPoolId;
				}
			}
		} else {
			//No Product reqs. Return this pool
			targetPoolId = poolArray[i].id;
      		return targetPoolId;
		}
		//increment counter
		i+=1;
	}
}
/**
 *  Set the Adobe Target Pool (called to set variable in DTM)
 *  @param {Array} poolList - Array of Products from dtm
 *  @param {String} poolFlag - (Optional) Flag to target a specific cookie
 *  @returns {Array} targetPool - Array containing the Adobe Target pool id and the number of impressions
 */
function setTargetPool(poolList,poolFlag) {
	"use strict";
	//Optional flag for Previous Pool Cookie
	var poolType = poolFlag || "";
	// Adobe Target Pool ID that will be returned
	var targetPool = [];
	// Get the olbprex cookie
	var olbprex = getCookie("olbprex");

	// If no OLBPREX, user is a prospect
	if (!olbprex) {
		targetPool.id = "prospect";
		targetPool.imp = 0;
		return targetPool;
	}
	// Get the previous pool and impressions cookie.
	var prevPool = getCookie("targetpools");
	// Create OLBPREX object
	var olbprexObj = createKeyValObj(olbprex);
  
	//If user has a previous campaign pool, check it.
	var hasPrevPool = false;
	var prevPoolArr;
	if (prevPool) {
		var prevPoolObj = createKeyValObj(prevPool);
		prevPoolArr = prevPoolObj[poolType];
		if (prevPoolArr) {
			prevPoolArr = prevPoolArr.split(",");
			hasPrevPool = true;
		}
	}
	if (hasPrevPool) {
		//Number of current Impressions
		var prevId = prevPoolArr[0];
		var prevImp = Number(prevPoolArr[1]);

		//Find Max Impressions in poolList
		var impressions_max;
		var l = poolList.length;
		var i;
		for ( i = 0; i < l; i+=1 ) {
			if (poolList[i].id === prevId) {
				impressions_max = Number(poolList[i].maximp);
        		break;
			}
			//disallow if previous pool id isn't in the list
			impressions_max = 0;
		}

		//Check if Campaign pool is under or over max impressions
		var currInx = findArrayIndex(poolList,prevId,"id");
		if (isLower(prevImp,impressions_max)) {
			//Under Max Impressions. Check if product purchased
			targetPool.id = findTargetPool(olbprexObj,poolList,currInx);
			if (targetPool.id === prevId) {
				//Product not owned. Return previous impressions
				targetPool.imp = prevImp;
			} else {
				//Product owned. Reset impressions for new campaign.
				targetPool.imp = 0;
			}
		} else {
			//Over Max Impressions. Increment index
			var nextInx = currInx + 1;

 			//Check if index number is out of bounds of the array index.
			if (!isLower(nextInx,(poolList.length))) {
				//Over array length, start pool over.
				targetPool.id = findTargetPool(olbprexObj,poolList);
			} else {
				//Under array length, start at index
				targetPool.id = findTargetPool(olbprexObj,poolList,nextInx);
			}
			targetPool.imp = 0;
		}
		return targetPool;
	} else {
		//Customer's first visit. Start campaign pool.
		targetPool.id = findTargetPool(olbprexObj,poolList);
		targetPool.imp = 0;
    return targetPool;
	}
}
